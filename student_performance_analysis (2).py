# -*- coding: utf-8 -*-
"""Student_Performance_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KzzoksZDgf7N7YoihSDuw4Pg5nEsFfF6
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## Helper functions to map grades"""

grade_mapping = {
    "A+": 4.0,
    "A": 4.0,
    "A-": 3.7,
    "B+": 3.3,
    "B": 3.0,
    "B-": 2.7,
    "C+": 2.3,
    "C": 2.0,
    "C-": 1.7,
    "D+": 1.3,
    "D": 1.0,
    "D-": 0.0,
    "E": 0.0,
    "ab": 0.0,
    None: None
}

def map_grade(grade):
    return grade_mapping.get(grade, None)


def get_credit_value(course_code):
    return int(course_code[4])


# The highest value for continous assessment marks, continous assessment marks are divided by this to make a value between 0 and 1 to make value more standarized.
CA_HIGHEST= 35

"""## Pre-processing Semester 1 Data"""

df1= pd.read_csv("sem1.csv")
def extract_course_data_sem1(row):
    course_data = {}
    for col in df1.columns:
        if "CO" in col:
            course_code = col[:6]
            if course_code not in course_data:
                course_data[course_code] = {
                    'ca': row.get(course_code + "_CA"),
                    'grade': row.get(course_code),
                    'attendance': row.get(course_code + "_attendance"),
                    'credit': get_credit_value(course_code)
                }
    return course_data


def process_row(row):
    course_data = extract_course_data_sem1(row)
    new_row = {
        "Gender": row['Gender'],
        "Study Hours": row['Study Hours'],
        "Extracurricular_Involvement": row['Extracurricular_Involvement'],
        "Part time job": row['Part time job'],
        "Struggle with English": row['Struggle with English'],
        "Year": 'first',
        "Pass/Fail" : row['1sem_pass/fail'],
        "Previous_GPA" : 4

    }

    one_credit_courses = [course for course in course_data.values() if course['credit'] == 1]
    for i, course in enumerate(one_credit_courses, start=1):
        new_row[f"one_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"one_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"one_credit_course_{i}_attendance"] = course['attendance']

    two_credit_courses = [course for course in course_data.values() if course['credit'] == 2]
    for i, course in enumerate(two_credit_courses, start=1):
        new_row[f"two_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"two_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"two_credit_course_{i}_attendance"] = course['attendance']


    three_credit_courses = [course for course in course_data.values() if course['credit'] == 3]
    for i, course in enumerate(three_credit_courses, start=1):
        new_row[f"three_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"three_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"three_credit_course_{i}_attendance"] = course['attendance']

    return new_row


# Apply the processing function to the dataframe
processed_df1= pd.DataFrame(df1.apply(process_row, axis=1).tolist())
processed_df1.head()

"""## Pre-processing Semester 2 Data"""

df2 = pd.read_csv("sem2.csv")
def extract_course_data_sem2(row):
    course_data = {}
    for col in df2.columns:
        if "CO" in col:
            course_code = col[:6]
            if course_code not in course_data:
                course_data[course_code] = {
                    'ca': row.get(course_code + "_CA"),
                    'grade': row.get(course_code),
                    'attendance': row.get(course_code + "_attendance"),
                    'credit': get_credit_value(course_code)
                }
    return course_data


def process_row(row):
    course_data = extract_course_data_sem2(row)
    new_row = {
        "Gender": row['Gender'],
        "Study Hours": row['Study Hours'],
        "Extracurricular_Involvement": row['Extracurricular_Involvement'],
        "Part time job": row['Part time job'],
        "Struggle with English": row['Struggle with English'],
        "Year": 'first',
        "Pass/Fail" : row['2sem_pass/fail'],
         "Previous_GPA" : row['1st_sem_GPA']
    }

    one_credit_courses = [course for course in course_data.values() if course['credit'] == 1]
    for i, course in enumerate(one_credit_courses, start=1):
        new_row[f"one_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"one_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"one_credit_course_{i}_attendance"] = course['attendance']

    two_credit_courses = [course for course in course_data.values() if course['credit'] == 2]
    for i, course in enumerate(two_credit_courses, start=1):
        new_row[f"two_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"two_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"two_credit_course_{i}_attendance"] = course['attendance']


    three_credit_courses = [course for course in course_data.values() if course['credit'] == 3]
    for i, course in enumerate(three_credit_courses, start=1):
        new_row[f"three_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"three_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"three_credit_course_{i}_attendance"] = course['attendance']

    return new_row



processed_df2= pd.DataFrame(df2.apply(process_row, axis=1).tolist())
processed_df2.head()
processed_df2.columns

"""## Pre-processing Semester 3 Data"""

df3 = pd.read_csv("sem3.csv")
def extract_course_data_sem3(row):
    course_data = {}
    for col in df3.columns:
        if "CO" in col:
            course_code = col[:6]
            if course_code not in course_data:
                course_data[course_code] = {
                    'ca': row.get(course_code + "_CA"),
                    'grade': row.get(course_code),
                    'attendance': row.get(course_code + "_attendance"),
                    'credit': get_credit_value(course_code)
                }
    return course_data


def process_row(row):
    course_data = extract_course_data_sem3(row)
    new_row = {
        "Gender": row['Gender'],
        "Study Hours": row['Study Hours'],
        "Extracurricular_Involvement": row['Extracurricular_Involvement'],
        "Part time job": row['Part time job'],
        "Struggle with English": row['Struggle with English'],
        "Year": 'second',
        "Pass/Fail" : row['3sem_pass/fail'],
         "Previous_GPA" : row['2nd_sem_GPA']
    }

    one_credit_courses = [course for course in course_data.values() if course['credit'] == 1]
    for i, course in enumerate(one_credit_courses, start=1):
        new_row[f"one_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"one_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"one_credit_course_{i}_attendance"] = course['attendance']

    two_credit_courses = [course for course in course_data.values() if course['credit'] == 2]
    for i, course in enumerate(two_credit_courses, start=1):
        new_row[f"two_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"two_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"two_credit_course_{i}_attendance"] = course['attendance']


    three_credit_courses = [course for course in course_data.values() if course['credit'] == 3]
    for i, course in enumerate(three_credit_courses, start=1):
        new_row[f"three_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"three_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"three_credit_course_{i}_attendance"] = course['attendance']

    return new_row



processed_df3= pd.DataFrame(df3.apply(process_row, axis=1).tolist())
processed_df3.head()
processed_df3.columns

"""## Pre-processing Semester 4 **Data**"""

df4 = pd.read_csv("sem4.csv")
def extract_course_data_sem4(row):
    course_data = {}
    for col in df4.columns:
        if "CO" in col:
            course_code = col[:6]
            if course_code not in course_data:
                course_data[course_code] = {
                    'ca': row.get(course_code + "_CA"),
                    'grade': row.get(course_code),
                    'attendance': row.get(course_code + "_attendance"),
                    'credit': get_credit_value(course_code)
                }
    return course_data


def process_row(row):
    course_data = extract_course_data_sem4(row)
    new_row = {
        "Gender": row['Gender'],
        "Study Hours": row['Study Hours'],
        "Extracurricular_Involvement": row['Extracurricular_Involvement'],
        "Part time job": row['Part time job'],
        "Struggle with English": row['Struggle with English'],
        "Year": 'second',
        "Pass/Fail" : row['4sem_pass/fail'],
         "Previous_GPA" : row['3rd_sem_GPA']
    }

    one_credit_courses = [course for course in course_data.values() if course['credit'] == 1]
    for i, course in enumerate(one_credit_courses, start=1):
        new_row[f"one_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"one_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"one_credit_course_{i}_attendance"] = course['attendance']

    two_credit_courses = [course for course in course_data.values() if course['credit'] == 2]
    for i, course in enumerate(two_credit_courses, start=1):
        new_row[f"two_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"two_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"two_credit_course_{i}_attendance"] = course['attendance']


    three_credit_courses = [course for course in course_data.values() if course['credit'] == 3]
    for i, course in enumerate(three_credit_courses, start=1):
        new_row[f"three_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"three_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"three_credit_course_{i}_attendance"] = course['attendance']

    return new_row



processed_df4= pd.DataFrame(df4.apply(process_row, axis=1).tolist())
processed_df4.head()
processed_df4.columns

"""# Pre-processing Semester 5 Data"""

df5 = pd.read_csv("sem5.csv")
def extract_course_data_sem5(row):
    course_data = {}
    for col in df5.columns:
        if "CS" in col:
            course_code = col[:6]
            if course_code not in course_data:
                course_data[course_code] = {
                    'ca': row.get(course_code + "_CA"),
                    'grade': row.get(course_code),
                    'attendance': row.get(course_code + "_attendance"),
                    'credit': get_credit_value(course_code)
                }
    return course_data


def process_row(row):
    course_data = extract_course_data_sem5(row)
    new_row = {
        "Gender": row['Gender'],
        "Study Hours": row['Study Hours'],
        "Extracurricular_Involvement": row['Extracurricular_Involvement'],
        "Part time job": row['Part time job'],
        "Struggle with English": row['Struggle with English'],
        "Year": 'third',
        "Pass/Fail" : row['5sem_pass/fail'],
         "Previous_GPA" : row['4th_sem_GPA']
    }

    one_credit_courses = [course for course in course_data.values() if course['credit'] == 1]
    for i, course in enumerate(one_credit_courses, start=1):
        new_row[f"one_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"one_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"one_credit_course_{i}_attendance"] = course['attendance']

    two_credit_courses = [course for course in course_data.values() if course['credit'] == 2]
    for i, course in enumerate(two_credit_courses, start=1):
        new_row[f"two_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"two_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"two_credit_course_{i}_attendance"] = course['attendance']


    three_credit_courses = [course for course in course_data.values() if course['credit'] == 3]
    for i, course in enumerate(three_credit_courses, start=1):
        new_row[f"three_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"three_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"three_credit_course_{i}_attendance"] = course['attendance']

    return new_row



processed_df5= pd.DataFrame(df5.apply(process_row, axis=1).tolist())
processed_df5.head()
processed_df5.columns

"""## Pre-Processing Semester 6 Data"""

df6 = pd.read_csv("sem6.csv")
def extract_course_data_sem6(row):
    course_data = {}
    for col in df6.columns:
        if "CS" in col:
            course_code = col[:6]
            if course_code not in course_data:
                course_data[course_code] = {
                    'ca': row.get(course_code + "_CA"),
                    'grade': row.get(course_code),
                    'attendance': row.get(course_code + "_attendance"),
                    'credit': get_credit_value(course_code)
                }
    return course_data


def process_row(row):
    course_data = extract_course_data_sem6(row)
    new_row = {
        "Gender": row['Gender'],
        "Study Hours": row['Study Hours'],
        "Extracurricular_Involvement": row['Extracurricular_Involvement'],
        "Part time job": row['Part time job'],
        "Struggle with English": row['Struggle with English'],
        "Year": 'third',
        "Pass/Fail" : row['6sem_pass/fail'],
         "Previous_GPA" : row['5th_sem_GPA']
    }

    one_credit_courses = [course for course in course_data.values() if course['credit'] == 1]
    for i, course in enumerate(one_credit_courses, start=1):
        new_row[f"one_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"one_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"one_credit_course_{i}_attendance"] = course['attendance']

    two_credit_courses = [course for course in course_data.values() if course['credit'] == 2]
    for i, course in enumerate(two_credit_courses, start=1):
        new_row[f"two_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"two_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"two_credit_course_{i}_attendance"] = course['attendance']


    three_credit_courses = [course for course in course_data.values() if course['credit'] == 3]
    for i, course in enumerate(three_credit_courses, start=1):
        new_row[f"three_credit_course_{i}_ca"] = course['ca']/CA_HIGHEST
        new_row[f"three_credit_course_{i}_grade"] = map_grade(course['grade'])
        new_row[f"three_credit_course_{i}_attendance"] = course['attendance']

    return new_row



processed_df6= pd.DataFrame(df6.apply(process_row, axis=1).tolist())
processed_df6.head()

dataframe = pd.concat([processed_df1, processed_df2, processed_df3, processed_df4, processed_df5, processed_df6], ignore_index=True)
dataframe.shape

dataframe.columns

#filling NAN values with 0
dataframe.fillna(0, inplace=True)
dataframe.head()

"""#### Pre-processing Study Hour column"""

# Replace the string 'less than 1 hour' with a suitable numerical value by, 0.5
dataframe['Study Hours'] = dataframe['Study Hours'].replace('less than 1 hour', 0.5)
# Replace the string 'less than 1 hour' with a suitable numerical value by, 6.5
dataframe['Study Hours'] = dataframe['Study Hours'].replace('more than 6 hours',6.5)
print(dataframe['Study Hours'].head())

dataframe.columns
#shuffle the dataframe
dataframe = dataframe.sample(frac = 1)

"""## Selecting Feature Set and Independent Variables"""

y = dataframe['Pass/Fail']  # Target variable

# Define the feature columns (all columns except Pass/Fail)
X = dataframe.drop('Pass/Fail', axis=1)  # Features

# Check the shape of X and y to ensure they were separated correctly
print(X.shape)
print(y.shape)

"""## One Hot Encoder to deal with Categorical Data"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0,2,3,4,5])], remainder='passthrough')
X= np.array(ct.fit_transform(X))
X.shape

"""### Splitting the data into Train and Test Set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

"""### Feature Engineering for identify most important features of Feature Set"""

from sklearn.ensemble import RandomForestRegressor  # Example model

# Train a RandomForestRegressor (you can use any other model like RandomForestClassifier if it's classification)
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Get feature importance
importances = model.feature_importances_

# Get the names of the encoded features from the ColumnTransformer
# Categorical features were one-hot encoded, so we get the new feature names
encoded_feature_names = ct.get_feature_names_out()

# Combine the encoded feature names with their importance
feature_importance = pd.DataFrame({
    'feature': encoded_feature_names,
    'importance': importances
})

# Sort the features by importance
feature_importance = feature_importance.sort_values(by='importance', ascending=False)

# Display the feature importance
print(feature_importance)

"""### Applying a standard scaler"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)

"""### Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Assuming X_train and X_test have already been scaled
# X_train and X_test are already transformed using StandardScaler

# Define and train the RandomForestClassifier
classifier = RandomForestClassifier(random_state=42)
classifier.fit(X_train, y_train)

# Predict on the test data
y_pred = classifier.predict(X_test)

# Evaluate the model performance
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report for precision, recall, and F1-score
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Display the confusion matrix
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

!pip install xgboost

"""### XGBoost Classifier"""

from xgboost import XGBClassifier

# Define and train the XGBoost classifier
xgb_classifier = XGBClassifier(
    n_estimators=100,
    learning_rate=0.1,
    max_depth=5,
    random_state=42,
    use_label_encoder=False,
    eval_metric='logloss'
)
xgb_classifier.fit(X_train, y_train)

xgb_classifier.fit(X_train, y_train)

# Predict on the test data
y_pred = xgb_classifier.predict(X_test)

# Evaluate the model performance
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report for precision, recall, and F1-score
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Display the confusion matrix
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

"""### Decision Tree Classifier"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Define and train the Decision Tree classifier
dt_classifier = DecisionTreeClassifier(random_state=42)
dt_classifier.fit(X_train, y_train)

# Predict on the test data
y_pred = dt_classifier.predict(X_test)

# Evaluate the model performance
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report for precision, recall, and F1-score
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Display the confusion matrix
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

dataframe.columns

"""## Model training only with continous assessment marks and other features except final grades of subjects"""

filtered_dataframe = dataframe[[col for col in dataframe.columns if 'grade' not in col]]
filtered_dataframe.columns
filtered_dataframe.shape

y = filtered_dataframe['Pass/Fail']  # Target variable

# Define the feature columns (all columns except Pass/Fail)
X = filtered_dataframe.drop('Pass/Fail', axis=1)  # Features

# Check the shape of X and y to ensure they were separated correctly
print(X.shape)
print(y.shape)

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
print("X Shape :{}" ,X.shape)
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(categories = "auto", handle_unknown = "ignore"), [0,2,3,4,5])], remainder='passthrough')
X= np.array(ct.fit_transform(X))
print(X.shape)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_train.shape

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Assuming X_train and X_test have already been scaled
# X_train and X_test are already transformed using StandardScaler

# Define and train the RandomForestClassifier
classifier = RandomForestClassifier(random_state=42)
classifier.fit(X_train, y_train)

# Predict on the test data
y_pred = classifier.predict(X_test)

# Evaluate the model performance
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report for precision, recall, and F1-score
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Display the confusion matrix
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

from xgboost import XGBClassifier

# Define and train the XGBoost classifier
xgb_classifier = XGBClassifier(
    n_estimators=100,
    learning_rate=0.1,
    max_depth=5,
    random_state=42,
    use_label_encoder=False,
    eval_metric='logloss'
)
xgb_classifier.fit(X_train, y_train)

xgb_classifier.fit(X_train, y_train)

# Predict on the test data
y_pred = xgb_classifier.predict(X_test)

# Evaluate the model performance
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report for precision, recall, and F1-score
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Display the confusion matrix
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Define and train the Decision Tree classifier
dt_classifier = DecisionTreeClassifier(random_state=42)
dt_classifier.fit(X_train, y_train)

# Predict on the test data
y_pred = dt_classifier.predict(X_test)

# Evaluate the model performance
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report for precision, recall, and F1-score
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Display the confusion matrix
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, roc_curve, auc
from xgboost import XGBClassifier
import numpy as np

# Define and train the XGBoost classifier
xgb_classifier = XGBClassifier(
    n_estimators=100,
    learning_rate=0.1,
    max_depth=5,
    random_state=42,
    use_label_encoder=False,
    eval_metric='logloss'
)
xgb_classifier.fit(X_train, y_train)

# Predict on the test data
y_pred = xgb_classifier.predict(X_test)

# Evaluate the model performance
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

from sklearn.model_selection import KFold, cross_val_score
from sklearn.ensemble import RandomForestClassifier  # Example model
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score, make_scorer

# Set up k-fold cross-validation
k = 10
kf = KFold(n_splits=k, shuffle=True, random_state=42)

# Evaluate model using cross-validation
scores = cross_val_score(xgb_classifier, X, y, cv=kf, scoring=make_scorer(accuracy_score))

# Output the results
print("Cross-validation accuracy scores:", scores)
print("Mean accuracy:", scores.mean())
print("Standard deviation:", scores.std())

# Plot the Confusion Matrix using Seaborn
plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Predicted Negative', 'Predicted Positive'], yticklabels=['Actual Negative', 'Actual Positive'])
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.title('Confusion Matrix')
plt.show()

# Plot ROC Curve (for binary classification)
y_prob = xgb_classifier.predict_proba(X_test)[:,1]  # Probability estimates
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8,6))
plt.plot(fpr, tpr, color='blue', label=f'ROC Curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='red', linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()

# Feature Importance (corrected)
from xgboost import XGBClassifier, plot_importance  # Correct import for XGBoost plot_importance


plot_importance(xgb_classifier)  # Correct method to plot feature importance
plt.title('Feature Importance')
plt.show()

import pandas as pd
import numpy as np

# Example feature values for a new instance
data = {
    'Gender': ['Male'],
    'Study Hours': [1],
    'Extracurricular_Involvement': ['Yes'],
    'Part time job': ['Yes'],
    'Struggle with English': ['Yes'],
    'Year': ['Second'],
    'Previous_GPA' :  [3.6],
    'one_credit_course_1_ca': [15/35],
    'one_credit_course_1_attendance': [1],
    'one_credit_course_2_ca': [16/35],
    'one_credit_course_2_attendance': [1],
    'one_credit_course_3_ca': [23/35],
    'one_credit_course_3_attendance': [1],
    'two_credit_course_1_ca': [8/35],
    'two_credit_course_1_attendance': [1],
    'two_credit_course_2_ca': [11/35],
    'two_credit_course_2_attendance': [1],
    'two_credit_course_3_ca': [29/35],
    'two_credit_course_3_attendance': [1],
    'two_credit_course_4_ca': [11/35],
    'two_credit_course_4_attendance': [1],
    'two_credit_course_5_ca': [31/35],
    'two_credit_course_5_attendance': [1],
    'two_credit_course_6_ca': [27/35],
    'two_credit_course_6_attendance': [1],
    'one_credit_course_4_ca': [0],
    'one_credit_course_4_attendance': [0],
    'three_credit_course_1_ca': [0],
    'three_credit_course_1_attendance': [0],
    'three_credit_course_2_ca': [0],
    'three_credit_course_2_attendance': [0]
}

#converting data into a df
new_data =pd.DataFrame(data)
new_data

transformed =ct.transform(new_data)
print(transformed)

scaled_new_data= sc.fit(transformed)
print(scaled_new_data)

# Predict the result for the new data
y_pred_new = xgb_classifier.predict(transformed)

# If you want probability estimates for classification
y_prob_new = xgb_classifier.predict_proba(transformed)

# Output the predicted class and probabilities
print(f'Predicted Class: {y_pred_new}')
print(f'Predicted Probabilities: {y_prob_new}')


#predicted class : 1 -> Pass